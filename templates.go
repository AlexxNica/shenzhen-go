package main

import (
	htmltmpl "html/template"
	texttmpl "text/template"
)

const (
	dotTemplateSrc = `digraph {
	graph[rankdir="UD",fontname="Go"];
	node[shape=box,fontname="Go"];
	edge[fontname="Go Mono"];
	{{range .Nodes}}
	"{{.Name}}"[URL="/node/{{.Name}}"];{{end}}
	{{range .Edges}}
	"{{.Src}}" -> "{{.Dst}}" [label="{{.Name}}",URL="/edge/{{.Name}}"];{{end}}
}`

	goTemplateSrc = `// This binary was automatically generated by Shenzhen Go.
package main

import (
	{{range .Imports}}"{{.}}"
	{{end}}"sync"
)

func main() {
	{{range .Edges}}
	{{.Name}} := make(chan {{.Type}}, {{.Cap}}){{end}}
	var wg sync.WaitGroup
	{{range .Nodes}}
	{{if .Wait}}wg.Add(1)
	{{end}}go func() {
		{{if .Wait}}defer wg.Done()
		{{end}}{{.Code}}
	}()
	{{end}}
	wg.Wait()
}
`

	css = `
	body {
		font-family: "Go","San Francisco","Helvetica Neue",Helvetica,sans-serif;
		float: none;
		max-width: 800px;
		margin: 20 auto 0;
	}
	form {
		float: none;
		max-width: 800px;
		margin: 0 auto;
	}
	div.formfield {
		margin-top: 12px;
		margin-bottom: 12px;
	}
	label {
		float: left;
		text-align: right;
		margin-right: 15px;
		width: 50%;
	}
	input {
		font-family: "Go Mono","Fira Code",sans-serif;
		font-size: 12pt;
	}
	select {
		font-family: "Go Mono","Fira Code",sans-serif;
		font-size: 12pt;
	}
	textarea {
		font-family: "Go Mono","Fira Code",sans-serif;
		font-size: 12pt;
	}
	div svg {
		display: block;
		margin: 0 auto;
	}
	div.hcentre {
		text-align: center;
	}
	`

	edgeEditorTemplateSrc = `<head>
	<title>{{with .Edge}}{{.Name}}{{else}}[New]{{end}}</title><style>` + css + `</style>
</head>
<body>
	<h1>{{with .Edge}}{{.Name}}{{else}}[New]{{end}}</h1>
	<form method="post">
	<div class="formfield"><label for="Name">Name</label><input type="text" name="Name" required pattern="^[_a-zA-Z][_a-zA-Z0-9]*$" title="Must start with a letter or underscore, and only contain letters, digits, or underscores." value="{{with .Edge}}{{.Name}}{{end}}"></div>
	<div class="formfield"><label for="Src">Source node</label><select name="Src">{{range .Graph.Nodes}}<option value="{{.Name}}" {{if $.Edge}}{{if eq .Name $.Edge.Src}}selected{{end}}{{end}}>{{.Name}}</option>{{end}}</select></div>
	<div class="formfield"><label for="Dst">Destination node</label><select name="Dst">{{range .Graph.Nodes}}<option value="{{.Name}}" {{if $.Edge}}{{if eq .Name $.Edge.Dst}}selected{{end}}{{end}}>{{.Name}}</option>{{end}}</select></div>
	<div class="formfield"><label for="Type">Type</label><input type="text" name="Type" required value="{{with .Edge}}{{.Type}}{{end}}"></div>
	<div class="formfield"><label for="Cap">Capacity</label><input type="text" name="Cap" required value="{{with .Edge}}{{.Cap}}{{end}}"></div>
	<div class="formfield hcentre"><input type="submit" value="Save"> <input type="button" value="Return" onclick="window.location.href='/'"></div>
	</form>
</body>
`
	nodeEditorTemplateSrc = `<head>
	<title>{{.Node.Name}}</title><style>` + css + `</style>
</head>
<body>
	{{with .Node}}
	<h1>{{.Name}}</h1>
	<form method="post">
	<div class="formfield"><label for="Name">Name</label><input name="Name" type="text" required value="{{.Name}}"></div>
	<div class="formfield"><label for="Wait">Wait for this to finish</label><input name="Wait" type="checkbox" {{if .Wait}}checked{{end}}></div>
	<div class="formfield"><textarea name="Code" rows="25" cols="80">{{.Code}}</textarea></div>
	<div class="formfield hcentre"><input type="submit" value="Save"> <input type="button" value="Return" onclick="window.location.href='/'"></div>
	</form>
	{{end}}
</body>
`

	rootTemplateSrc = `<head>
	<title>SHENZHEN GO</title><style>` + css + `</style>
</head>
<body>
<h1>SHENZHEN GO</h1>
<div>
View as: <a href="/?go">Go</a> <a href="/?dot">Dot</a> <a href="/?json">JSON</a> | <a href="?run">Run</a><br>
{{.}}
</div>
</body>
`
)

var (
	dotTemplate = texttmpl.Must(texttmpl.New("dot").Parse(dotTemplateSrc))
	goTemplate  = texttmpl.Must(texttmpl.New("golang").Parse(goTemplateSrc))

	rootTemplate       = htmltmpl.Must(htmltmpl.New("root").Parse(rootTemplateSrc))
	nodeEditorTemplate = htmltmpl.Must(htmltmpl.New("nodeEditor").Parse(nodeEditorTemplateSrc))
	edgeEditorTemplate = htmltmpl.Must(htmltmpl.New("edgeEditor").Parse(edgeEditorTemplateSrc))
)

{
	"name": "Word counter",
	"package_path": "github.com/google/shenzhen-go/examples/wc",
	"imports": [
		"\"fmt\"",
		"\"strings\"",
		"\"os\""
	],
	"is_command": true,
	"nodes": {
		"Count lines, words, characters": {
			"name": "Count lines, words, characters",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"head": [
					""
				],
				"body": [
					"// Note that the \"words\" and \"chars\" won't match output from the usual wc command",
					"// for various reasons (the scanner trims \\n, strings.Split doesn't consider other",
					"// whitespace chars).",
					"",
					"sum := make(map[string]struct{lines, words, chars int})",
					"for fl := range Lines {",
					"    s := sum[fl.Path]",
					"    s.lines++",
					"    s.words += len(strings.Split(fl.Line, \" \"))",
					"    s.chars += len(fl.Line)",
					"    sum[fl.Path] = s",
					"}",
					"",
					"l, w, c := 0, 0, 0",
					"for f, s := range sum {",
					"    fmt.Printf(\"%d\\t%d\\t%d\\t%s\\n\", s.lines, s.words, s.chars, f)",
					"    l += s.lines",
					"    w += s.words",
					"    c += s.chars",
					"}",
					"",
					"if len(sum) \u003e 1 {",
					"    fmt.Printf(\"%d\\t%d\\t%d\\ttotal\\n\", l, w, c)",
					"}"
				],
				"tail": [
					""
				]
			},
			"part_type": "Code"
		},
		"Get paths from os.Args": {
			"name": "Get paths from os.Args",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"head": [
					""
				],
				"body": [
					"for i, p := range os.Args {",
					"    if i == 0 {",
					"        continue",
					"    }",
					"    Paths \u003c- p",
					"}",
					"close(Paths)"
				],
				"tail": [
					""
				]
			},
			"part_type": "Code"
		},
		"Report error \u0026 exit": {
			"name": "Report error \u0026 exit",
			"wait": false,
			"multiplicity": 1,
			"part": {
				"head": [
					""
				],
				"body": [
					"if err := \u003c-Errors; err != nil {",
					"    fmt.Printf(\"Couldn't count: %v\", err)",
					"    os.Exit(1)",
					"}"
				],
				"tail": [
					""
				]
			},
			"part_type": "Code"
		},
		"Text File Reader": {
			"name": "Text File Reader",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"path_input": "Paths",
				"output": "Lines",
				"errors": "Errors"
			},
			"part_type": "TextFileReader"
		}
	},
	"channels": {
		"Errors": {
			"name": "Errors",
			"type": "error",
			"cap": 0
		},
		"Lines": {
			"name": "Lines",
			"type": "partlib.FileLine",
			"cap": 0
		},
		"Paths": {
			"name": "Paths",
			"type": "string",
			"cap": 0
		}
	}
}

{
	"name": "Word counter",
	"package_path": "github.com/google/shenzhen-go/examples/wc",
	"imports": [
		"\"fmt\"",
		"\"strings\"",
		"\"os\""
	],
	"is_command": true,
	"nodes": {
		"Broadcast": {
			"name": "Broadcast",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"input": "Lines",
				"outputs": [
					"Lines1",
					"Lines2",
					"Lines3"
				]
			},
			"part_type": "Broadcast"
		},
		"Count characters": {
			"name": "Count characters",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"head": [
					""
				],
				"body": [
					"// Note that the \"words\" and \"chars\" won't match output from the usual wc command",
					"// for various reasons (the scanner trims \\n, strings.Split doesn't consider other",
					"// whitespace chars).",
					"",
					"sum := make(map[string]int)",
					"for fl := range Lines3 {",
					"\tsum[fl.Path] += len(fl.Line)",
					"}",
					"CharCount \u003c- sum"
				],
				"tail": [
					"close(CharCount)"
				]
			},
			"part_type": "Code"
		},
		"Count lines": {
			"name": "Count lines",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"head": [
					""
				],
				"body": [
					"sum := make(map[string]int)\r",
					"for fl := range Lines1 {\r",
					"\tsum[fl.Path] ++\r",
					"}\r",
					"LineCount \u003c- sum"
				],
				"tail": [
					"close(LineCount)"
				]
			},
			"part_type": "Code"
		},
		"Count words": {
			"name": "Count words",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"head": [
					""
				],
				"body": [
					"// Note that the \"words\" and \"chars\" won't match output from the usual wc command",
					"// for various reasons (the scanner trims \\n, strings.Split doesn't consider other",
					"// whitespace chars).",
					"",
					"sum := make(map[string]int)",
					"for fl := range Lines2 {",
					"\tsum[fl.Path] += len(strings.Split(fl.Line, \" \"))",
					"}",
					"WordCount \u003c- sum"
				],
				"tail": [
					"close(WordCount)"
				]
			},
			"part_type": "Code"
		},
		"Print summary": {
			"name": "Print summary",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"head": [
					""
				],
				"body": [
					"lc, wc, cc := \u003c-LineCount, \u003c-WordCount, \u003c-CharCount\r",
					"\r",
					"if len(lc) == 1 {\r",
					"for f := range lc {\r",
					"\tfmt.Printf(\"%d\\t%d\\t%d\\t%s\\n\", lc[f], wc[f], cc[f], f)\r",
					"}\r",
					" return\r",
					"}\r",
					"\r",
					"l, w, c := 0, 0, 0\r",
					"for f := range lc {\r",
					"\tfmt.Printf(\"%d\\t%d\\t%d\\t%s\\n\", lc[f], wc[f], cc[f], f)\r",
					"\tl += lc[f]\r",
					"\tw += wc[f]\r",
					"\tc += cc[f]\r",
					"}\r",
					"fmt.Printf(\"%d\\t%d\\t%d\\ttotal\\n\", l, w, c)"
				],
				"tail": [
					""
				]
			},
			"part_type": "Code"
		},
		"Report errors": {
			"name": "Report errors",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"head": [
					""
				],
				"body": [
					"for err := range Errors {\r",
					"        if err == nil {\r",
					"                continue\r",
					"        }\r",
					"\tfmt.Fprintf(os.Stderr, \"Couldn't count: %v\", err)\r",
					"}"
				],
				"tail": [
					""
				]
			},
			"part_type": "Code"
		},
		"Send os.Args[1:]": {
			"name": "Send os.Args[1:]",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"output": "Args",
				"items": [
					"// os.Args is a slice where os.Args[0] = the path to the program.",
					"// We don't need to count that (it would be pointless) so send",
					"// any other args using a subslice.",
					"",
					"os.Args[1:]"
				]
			},
			"part_type": "StaticSend"
		},
		"Split args": {
			"name": "Split args",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"input": "Args",
				"output": "Paths"
			},
			"part_type": "Unslicer"
		},
		"Text File Reader": {
			"name": "Text File Reader",
			"wait": true,
			"multiplicity": 4,
			"part": {
				"path_input": "Paths",
				"output": "Lines",
				"errors": "Errors"
			},
			"part_type": "TextFileReader"
		}
	},
	"channels": {
		"Args": {
			"name": "Args",
			"type": "[]string",
			"cap": 0
		},
		"CharCount": {
			"name": "CharCount",
			"type": "map[string]int",
			"cap": 0
		},
		"Errors": {
			"name": "Errors",
			"type": "error",
			"cap": 0
		},
		"LineCount": {
			"name": "LineCount",
			"type": "map[string]int",
			"cap": 0
		},
		"Lines": {
			"name": "Lines",
			"type": "partlib.FileLine",
			"cap": 0
		},
		"Lines1": {
			"name": "Lines1",
			"type": "partlib.FileLine",
			"cap": 0
		},
		"Lines2": {
			"name": "Lines2",
			"type": "partlib.FileLine",
			"cap": 0
		},
		"Lines3": {
			"name": "Lines3",
			"type": "partlib.FileLine",
			"cap": 0
		},
		"Paths": {
			"name": "Paths",
			"type": "string",
			"cap": 0
		},
		"WordCount": {
			"name": "WordCount",
			"type": "map[string]int",
			"cap": 0
		}
	}
}
